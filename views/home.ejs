<style>
  #div_books img{
    cursor:pointer;
  }
  #div_books .bi-cart{
    cursor: pointer;
    color: green;
  }
</style>
<div class="my-5 row"> <!--아래값 마진 5 설정-->
    <div class="col">
      <div class="row mb-3 justify-content-end"> <!--justify-content-end이걸 사용함으로 이 클래스의 로우행은 오른쪽 출력 즉 아래 코드에 영향x-->
        <form name="frm" class="col-6 col-md-4 col-lg-3"><!--from태그를 이용해서 입력을 받고 그 입력을 서버로 보내주는 역할을 함.-->
          <div class="input-group"> <!--class = input-group을 사용해 검색과 타이핑 창의 간격을 맞춰준다.-->
            <input name="query" class="form-control" type="text" value="그리스로마신화" />
            <button class="btn btn-primary">검색</button>
          </div>
        </form>
      </div>
      <!-- 검색결과 출력 -->
      <div id="div_books" class="row"></div>
      <div class="text-center">
        <button class="btn btn-primary" id="prev">이전</button>
        <span id="span_page">1/10</span>
        <button class="btn btn-primary" id="next">다음</button>
      </div>
    </div>
  </div>
  <!-- 도서정보 출력 템플릿 -->
  <script type="x-handlebars-template" id="temp_books">
    {{#each documents}} <!--반복문 for each구문을 사용함, 도큐먼트 값만큼 반복-->
      <div class="col-6 col-md-4 col-lg-2 mb-2">
        <div class="card"><!--class=card를 이용해 책의 틀을 이쁘게 만들어줌(부트스트랩)-->
          <div class="card-body">
            <img src="{{chkImage thumbnail}}" width="90%" index="{{@index}}"> <!--도서의 이미지를 표시합니다. {{chkImage thumbnail}} 부분은 이미지 URL을 동적으로 생성하고, 이미지의 너비는 90%로 설정됩니다. index="{{@index}}"는 현재 도서의 인덱스를 저장하는 속성입니다.-->
            <div class="ellipsis">{{title}}</div>
          </div>
          <div class="card-footer">
            {{fmtPrice price}}
            <i class="bi bi-cart float-end" book="{{book @this}}"></i><!--장바구니 아이콘을 나타냅니다. bi-cart 클래스는 부트스트랩 아이콘 아이콘 라이브러리에서 가져온 아이콘을 나타냅니다. book="{{book @this}}"는 현재 도서의 정보를 저장하는 데이터 속성입니다.-->
          </div>
        </div>
      </div>
      <%-include('books/modal.ejs')%>
    {{/each}}
  </script>
<!--Handlebars 함수-->
  <script>
    //Handlebars.registerHelper를 사용하여 템플릿 헬퍼 함수를 등록할 수 있으며, 
    //이 함수를 사용하여 템플릿 내에서 사용자 정의 기능을 수행하거나 동적 데이터를 포맷하거나 다양한 작업을 수행할 수 있습니다. -->
    Handlebars.registerHelper("chkImage", function(image){
        if(image){
          return image;
        }else{
          return "https://via.placeholder.com/120x170"; //비어있는 이미지(부트스트랩)
        }
    });

    //price를 문자열로 변환한 후, 정규 표현식을 사용하여 세 자리마다 쉼표를 추가하는 포맷팅을 수행합니다. 
    //예를 들어, 10000이라는 가격을 10,000원과 같이 포맷합니다.

    Handlebars.registerHelper("fmtPrice", function(price){
      if(price) return price.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',') + '원'; // \B는 단어 경계가 아닌 부분에 대응이고 \d{3}은 문자열 3글자다.
    });
   // book: 템플릿에서 전달된 도서 정보 데이터를 나타냅니다.
   //이 함수는 주어진 도서 정보(book)를 JSON 문자열로 변환하여 반환합니다. 이렇게 하면 템플릿 내에서 도서 정보를 JSON 형식으로 사용할 수 있게 됩니다.
    Handlebars.registerHelper("book", function(book){ //위에 this가 펑션에 들어옴
      return JSON.stringify(book); //javaScript 객체(book)를 JSON 문자열로 변환하는 작업을 수행합니다.
    });
  </script>
  <script type="module"> //JavaScript 파일을 모듈로서 로드하고 실행하는 데 사용됩니다. 모듈은 JavaScript 코드를 더 잘 구성하고 재사용 가능한 코드 블록을 만들 수 있게 해주는 기술입니다.
    import { app } from '/javascripts/firebaseInit.js';
    import { getDatabase, ref, set, get } from "https://www.gstatic.com/firebasejs/10.4.0/firebase-database.js";
    const db = getDatabase(app);

    let query=$(frm.query).val(); //jQuery를 사용하여 HTML 폼(form) 요소에서 데이터를 가져오는 방법을 나타냅니다. frm에서 query라는것을 불러옴
    let page=1;
    // 장바구니 아이콘을 클릭했을 때
   /* 코드는 웹 페이지에서 "장바구니" 아이콘을 클릭했을 때 실행되는 JavaScript 코드입니다. 아래에서 코드의 주요 내용을 설명하겠습니다:
    $("#div_books").on("click", ".bi-cart", async function(){ ... });:
    이 부분은 #div_books 요소 내에서 "bi-cart" 클래스를 가진 요소가 클릭되었을 때 실행되는 이벤트 핸들러입니다. 즉, "장바구니" 아이콘이 클릭되면 이 코드 블록이 실행됩니다.    
    if (!sessionStorage.getItem("email")) { ... }:
    
    이 부분은 현재 사용자가 로그인한 상태인지 확인합니다. sessionStorage에 "email"이라는 항목이 없으면 사용자가 로그인하지 않은 것으로 간주하고, 로그인 페이지로 리다이렉트합니다.
    
    const book = JSON.parse($(this).attr("book"));:
    
    클릭된 "장바구니" 아이콘에 연결된 book 데이터를 가져옵니다. 이 데이터는 JSON 형식으로 저장되어 있으며, $(this).attr("book")를 사용하여 가져옵니다.
    
    const ref_book = cart/${sessionStorage.getItem('uid')}/${book.isbn};:
    
    ref_book 변수에는 현재 사용자의 UID와 도서의 ISBN 번호를 조합하여 장바구니 항목의 경로를 지정합니다. 이 경로는 Firebase Realtime Database에서 해당 사용자의 장바구니에 도서를 저장하는 데 사용됩니다.
    
    const snapshot = await get(ref(db, ref_book));:
    
    ref_book 경로에 해당하는 데이터를 Firebase Realtime Database에서 가져오기 위해 get 함수를 사용합니다. snapshot에는 해당 경로의 데이터 스냅샷이 저장됩니다.
    
    if (snapshot.val()) { ... }:
    
    데이터 스냅샷을 통해 해당 경로에 이미 데이터가 있는지 확인합니다. 데이터가 존재하면 이미 장바구니에 해당 도서가 있는 것으로 판단하고 알림을 표시합니다.
    
    if (!confirm("장바구니에 담으실건가요?")) return;:
    
    사용자에게 장바구니에 담을 것인지 확인하는 메시지를 표시하고, 확인을 누르지 않으면 함수를 종료합니다.
    
    set(ref(db, ref_book), book);:
    
    사용자가 확인을 누르면, 해당 도서를 사용자의 장바구니에 추가하기 위해 set 함수를 사용합니다. 이 함수를 통해 도서 데이터를 Firebase Realtime Database에 저장합니다.
    
    alert("장바구니에 담았습니다!");:
    
    도서가 성공적으로 장바구니에 추가되었음을 사용자에게 알리는 알림을 표시합니다.
    
    이 코드는 사용자가 도서를 장바구니에 추가하는 동작을 구현하고, Firebase Realtime Database를 사용하여 장바구니에 도서 정보를 저장하는 데 사용됩니다.*/
    $("#div_books").on("click", ".bi-cart", async function(){ //#div_books 앞에 #이 있으면 아이디 형식으로 받아오겠다는 뜻, class네임은 불러올때 .을 붙인다. ,이름은 아무것도 안붙임.
        if(!sessionStorage.getItem("email")){
            location.href="/users/login";
            alert("로그인 안됐잖아 임마")
        } else {
            // 장바구니에 상품정보저장
            const book=JSON.parse($(this).attr("book")); //여기서 this는 장바구니를 뜻한다. json에 parse는스트링을 오브젝트로 바꿔줌
            console.log(book);
            const ref_book = `cart/${sessionStorage.getItem('uid')}/${book.isbn}`;
            // const ref_book = ref(db, "cart/" + sessionStorage.getItem("uid"))이렇게도 사용가능 이러면 기존책이 계속 바뀜. 추가가 아니라 수정임. 그러기위해 isbn사용
            // await set(ref_book, book)
            // alert("해당도서가 저장되었습니다.")
            // 장바구니에 도서가 있는지 체크
            const snapshot = await get(ref(db, ref_book)); //snapshot은 장바구니에 그 책이 있는지 없는지 확인해주는것. await은 값을 가져올동안 기다려라.
            if(snapshot.val()){
                alert("장바구니에 이미 있습니다");
            }else{
                if(!confirm("장바구니에 담으실건가요?")) return;
                set(ref(db, ref_book), book);
                alert("장바구니에 담았습니다!");
            }
        }
    });
    //이미지를 클릭했을때
    $("#div_books").on("click", "img", function(){
      let index=$(this).attr("index");
      //alert(index+"번이다 이놈아");
      $("#modal"+index).modal("show");
    });
  
    $(frm).on("submit", function (e) {
      e.preventDefault();
      page = 1;
      query = $(frm.query).val();
      getBooks();
    });
    $("#prev").on("click", function () {
      page -- ;
      getBooks();
    });
    $("#next").on("click", function () {
      page ++ ;
      getBooks();
    });
    getBooks();
  
    // 도서검색 데이터 불러오기
    function getBooks() {
      $.ajax({
        type: "GET",
            url: "https://dapi.kakao.com/v3/search/book?target=authors",
            headers: { "Authorization": "KakaoAK e3e46827f9bf192337a7b50ccc7835a0" },
            data: { query: query, page: page, size: 6 },
           success: function (data) {
             console.log(data);
            let temp = Handlebars.compile($("#temp_books").html());
            $("#div_books").html(temp(data));
  
            let last = Math.ceil(data.meta.pageable_count / 6);
            $("#span_page").html(page + "/" + last);
  
             if (page == 1) $("#prev").attr("disabled", true);
             else $("#prev").attr("disabled", false);


             if (data.meta.is_end) $("#next").attr("disabled", true);
             else $("#next").attr("disabled", false);
        },
        });
    }

  /*AX 요청을 사용하여 카카오 API에서 도서 정보를 검색하고, 검색 결과를 Handlebars.js를 사용하여 동적으로 웹 페이지에 표시하는 JavaScript 함수인 getBooks를 정의합니다. 아래에서 코드의 주요 내용을 설명하겠습니다:

  $.ajax({ ... }):
  
  이 부분은 jQuery를 사용하여 AJAX 요청을 생성하고 보냅니다. AJAX 요청을 통해 외부 API에서 도서 정보를 검색합니다.
  
  type: "GET":
  
  AJAX 요청의 HTTP 메서드를 GET으로 설정합니다.
  
  url: "https://dapi.kakao.com/v3/search/book?target=authors":
  
  요청이 보내질 URL을 지정합니다. 이 URL은 카카오 API의 도서 검색 엔드포인트를 나타냅니다.
  
  headers: { "Authorization": "KakaoAK e3e46827f9bf192337a7b50ccc7835a0" }:
  
  요청 헤더에 인증 토큰을 포함시킵니다. 이 토큰은 카카오 API에 대한 권한을 부여하는 데 사용됩니다.
  
  data: { query: query, page: page, size: 6 }:
  
  요청의 쿼리 매개변수를 설정합니다. query, page, size 등의 매개변수가 설정되어 있으며, 이는 API에 전달되어 검색 결과를 제한하거나 조정하는 데 사용됩니다.
  
  success: function (data) { ... }:
  
  요청이 성공적으로 완료되면 실행될 콜백 함수입니다. API에서 반환한 데이터는 data 매개변수로 받아옵니다.
  
  let temp = Handlebars.compile($("#temp_books").html());:
  
  Handlebars.js를 사용하여 동적으로 템플릿을 컴파일합니다. 이 템플릿은 검색 결과 데이터를 템플릿에 삽입하여 웹 페이지에 표시하는 데 사용됩니다.
  
  $("#div_books").html(temp(data));:
  
  컴파일된 Handlebars 템플릿을 사용하여 검색 결과 데이터를 HTML로 변환하고, 이를 #div_books라는 요소의 내용으로 설정하여 웹 페이지에 도서 정보를 표시합니다.
  
  let last = Math.ceil(data.meta.pageable_count / 6);:
  
  검색 결과의 페이지 수를 계산합니다. 페이지 수는 검색 결과의 총 개수를 페이지당 표시할 항목 수로 나눈 값의 올림으로 계산됩니다.
  
  $("#span_page").html(page + "/" + last);:
  
  현재 페이지 번호와 총 페이지 수를 표시하는 HTML 요소에 텍스트를 설정하여 사용자에게 현재 페이지 정보를 표시합니다.
  
  if (page == 1) $("#prev").attr("disabled", true);:
  
  현재 페이지가 첫 번째 페이지인 경우 이전 페이지 버튼을 비활성화합니다.
  
  if (data.meta.is_end) $("#next").attr("disabled", true);:
  
  API에서 반환한 데이터의 meta 속성에 is_end가 true인 경우 다음 페이지 버튼을 비활성화합니다. 이것은 더 이상 검색 결과가 없는 경우를 나타냅니다.
  
  이러한 방식으로 getBooks 함수는 API에서 도서 정보를 검색하고, 검색 결과를 동적으로 웹 페이지에 표시하며, 페이지 네비게이션 버튼의 활성화 상태를 관리합니다.
  */
</script>